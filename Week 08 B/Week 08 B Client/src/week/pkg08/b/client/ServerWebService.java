
package week.pkg08.b.client;

import week.pkg08.b.client.*;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ServerWebService", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ServerWebService {


    /**
     * 
     * @return
     *     returns java.lang.Boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isConnected", targetNamespace = "http://server/", className = "week.pkg08.b.client.IsConnected")
    @ResponseWrapper(localName = "isConnectedResponse", targetNamespace = "http://server/", className = "week.pkg08.b.client.IsConnectedResponse")
    @Action(input = "http://server/ServerWebService/isConnectedRequest", output = "http://server/ServerWebService/isConnectedResponse")
    public Boolean isConnected();

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findShortestBetweenNameAndSurname", targetNamespace = "http://server/", className = "week.pkg08.b.client.FindShortestBetweenNameAndSurname")
    @ResponseWrapper(localName = "findShortestBetweenNameAndSurnameResponse", targetNamespace = "http://server/", className = "week.pkg08.b.client.FindShortestBetweenNameAndSurnameResponse")
    @Action(input = "http://server/ServerWebService/findShortestBetweenNameAndSurnameRequest", output = "http://server/ServerWebService/findShortestBetweenNameAndSurnameResponse")
    public String findShortestBetweenNameAndSurname(
        @WebParam(name = "arg0", targetNamespace = "")
        Person arg0);

    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://server/", className = "week.pkg08.b.client.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://server/", className = "week.pkg08.b.client.HelloResponse")
    @Action(input = "http://server/ServerWebService/helloRequest", output = "http://server/ServerWebService/helloResponse")
    public String hello(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "addString", targetNamespace = "http://server/", className = "week.pkg08.b.client.AddString")
    @ResponseWrapper(localName = "addStringResponse", targetNamespace = "http://server/", className = "week.pkg08.b.client.AddStringResponse")
    @Action(input = "http://server/ServerWebService/addStringRequest", output = "http://server/ServerWebService/addStringResponse")
    public void addString(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findShortestAmongAllStrings", targetNamespace = "http://server/", className = "week.pkg08.b.client.FindShortestAmongAllStrings")
    @ResponseWrapper(localName = "findShortestAmongAllStringsResponse", targetNamespace = "http://server/", className = "week.pkg08.b.client.FindShortestAmongAllStringsResponse")
    @Action(input = "http://server/ServerWebService/findShortestAmongAllStringsRequest", output = "http://server/ServerWebService/findShortestAmongAllStringsResponse")
    public String findShortestAmongAllStrings();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findShortestBetween", targetNamespace = "http://server/", className = "week.pkg08.b.client.FindShortestBetween")
    @ResponseWrapper(localName = "findShortestBetweenResponse", targetNamespace = "http://server/", className = "week.pkg08.b.client.FindShortestBetweenResponse")
    @Action(input = "http://server/ServerWebService/findShortestBetweenRequest", output = "http://server/ServerWebService/findShortestBetweenResponse")
    public String findShortestBetween(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findShortestBetweenWithException", targetNamespace = "http://server/", className = "week.pkg08.b.client.FindShortestBetweenWithException")
    @ResponseWrapper(localName = "findShortestBetweenWithExceptionResponse", targetNamespace = "http://server/", className = "week.pkg08.b.client.FindShortestBetweenWithExceptionResponse")
    @Action(input = "http://server/ServerWebService/findShortestBetweenWithExceptionRequest", output = "http://server/ServerWebService/findShortestBetweenWithExceptionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/ServerWebService/findShortestBetweenWithException/Fault/Exception")
    })
    public String findShortestBetweenWithException(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws Exception_Exception
    ;

}
