
package tutorial;

import tutorial.*;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Server", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Server {


    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addString", targetNamespace = "http://server/", className = "tutorial.AddString")
    @ResponseWrapper(localName = "addStringResponse", targetNamespace = "http://server/", className = "tutorial.AddStringResponse")
    @Action(input = "http://server/Server/addStringRequest", output = "http://server/Server/addStringResponse")
    public String addString(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findShortestAmongAllStrings", targetNamespace = "http://server/", className = "tutorial.FindShortestAmongAllStrings")
    @ResponseWrapper(localName = "findShortestAmongAllStringsResponse", targetNamespace = "http://server/", className = "tutorial.FindShortestAmongAllStringsResponse")
    @Action(input = "http://server/Server/findShortestAmongAllStringsRequest", output = "http://server/Server/findShortestAmongAllStringsResponse")
    public String findShortestAmongAllStrings();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns double
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addTwoNumbersWithException", targetNamespace = "http://server/", className = "tutorial.AddTwoNumbersWithException")
    @ResponseWrapper(localName = "addTwoNumbersWithExceptionResponse", targetNamespace = "http://server/", className = "tutorial.AddTwoNumbersWithExceptionResponse")
    @Action(input = "http://server/Server/addTwoNumbersWithExceptionRequest", output = "http://server/Server/addTwoNumbersWithExceptionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Server/addTwoNumbersWithException/Fault/Exception")
    })
    public double addTwoNumbersWithException(
        @WebParam(name = "arg0", targetNamespace = "")
        Double arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        Double arg1)
        throws Exception_Exception
    ;

    /**
     * 
     * @return
     *     returns tutorial.MyPoint3D
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findPointWithHighestZ", targetNamespace = "http://server/", className = "tutorial.FindPointWithHighestZ")
    @ResponseWrapper(localName = "findPointWithHighestZResponse", targetNamespace = "http://server/", className = "tutorial.FindPointWithHighestZResponse")
    @Action(input = "http://server/Server/findPointWithHighestZRequest", output = "http://server/Server/findPointWithHighestZResponse")
    public MyPoint3D findPointWithHighestZ();

    /**
     * 
     * @return
     *     returns double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "averageOfAllNumbers", targetNamespace = "http://server/", className = "tutorial.AverageOfAllNumbers")
    @ResponseWrapper(localName = "averageOfAllNumbersResponse", targetNamespace = "http://server/", className = "tutorial.AverageOfAllNumbersResponse")
    @Action(input = "http://server/Server/averageOfAllNumbersRequest", output = "http://server/Server/averageOfAllNumbersResponse")
    public double averageOfAllNumbers();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findShortestBetweenWithException", targetNamespace = "http://server/", className = "tutorial.FindShortestBetweenWithException")
    @ResponseWrapper(localName = "findShortestBetweenWithExceptionResponse", targetNamespace = "http://server/", className = "tutorial.FindShortestBetweenWithExceptionResponse")
    @Action(input = "http://server/Server/findShortestBetweenWithExceptionRequest", output = "http://server/Server/findShortestBetweenWithExceptionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Server/findShortestBetweenWithException/Fault/Exception")
    })
    public String findShortestBetweenWithException(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findShortestBetween", targetNamespace = "http://server/", className = "tutorial.FindShortestBetween")
    @ResponseWrapper(localName = "findShortestBetweenResponse", targetNamespace = "http://server/", className = "tutorial.FindShortestBetweenResponse")
    @Action(input = "http://server/Server/findShortestBetweenRequest", output = "http://server/Server/findShortestBetweenResponse")
    public String findShortestBetween(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isConnected", targetNamespace = "http://server/", className = "tutorial.IsConnected")
    @ResponseWrapper(localName = "isConnectedResponse", targetNamespace = "http://server/", className = "tutorial.IsConnectedResponse")
    @Action(input = "http://server/Server/isConnectedRequest", output = "http://server/Server/isConnectedResponse")
    public String isConnected();

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "addMyPoint3D", targetNamespace = "http://server/", className = "tutorial.AddMyPoint3D")
    @ResponseWrapper(localName = "addMyPoint3DResponse", targetNamespace = "http://server/", className = "tutorial.AddMyPoint3DResponse")
    @Action(input = "http://server/Server/addMyPoint3DRequest", output = "http://server/Server/addMyPoint3DResponse")
    public void addMyPoint3D(
        @WebParam(name = "arg0", targetNamespace = "")
        MyPoint3D arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addTwoNumbers", targetNamespace = "http://server/", className = "tutorial.AddTwoNumbers")
    @ResponseWrapper(localName = "addTwoNumbersResponse", targetNamespace = "http://server/", className = "tutorial.AddTwoNumbersResponse")
    @Action(input = "http://server/Server/addTwoNumbersRequest", output = "http://server/Server/addTwoNumbersResponse")
    public double addTwoNumbers(
        @WebParam(name = "arg0", targetNamespace = "")
        Double arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        Double arg1);

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "addNumber", targetNamespace = "http://server/", className = "tutorial.AddNumber")
    @ResponseWrapper(localName = "addNumberResponse", targetNamespace = "http://server/", className = "tutorial.AddNumberResponse")
    @Action(input = "http://server/Server/addNumberRequest", output = "http://server/Server/addNumberResponse")
    public void addNumber(
        @WebParam(name = "arg0", targetNamespace = "")
        double arg0);

    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://server/", className = "tutorial.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://server/", className = "tutorial.HelloResponse")
    @Action(input = "http://server/Server/helloRequest", output = "http://server/Server/helloResponse")
    public String hello(
        @WebParam(name = "name", targetNamespace = "")
        String name);

}
